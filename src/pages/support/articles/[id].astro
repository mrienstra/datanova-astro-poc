---
import BaseLayout from "@layout/BaseLayout.astro";
import type { WithContext, Thing } from "schema-dts";
import { formatDate } from "@utils/utils";
import { getReadingTime } from "@utils/reading-time";
import { getCollection, getEntry, render } from "astro:content";

export async function getStaticPaths() {
  const posts = await getCollection("articles");
  return posts.map(post => ({
    params: { id: post.id },
    props: { post },
  }));
}

// 1. Get the slug from the incoming server request
const { id } = Astro.params;
if (id === undefined) {
  return Astro.redirect("/404");
}

// 2. Query for the entry directly using the request slug
const post = await getEntry("articles", id);

// 3. Redirect if the entry does not exist
if (post === undefined) {
  return Astro.redirect("/404");
}

// 4. Render the entry to HTML in the template
const { Content, headings } = await render(post);

const validHeadings = headings.filter((heading) => heading.depth === 2);
const readingTime = getReadingTime(post.body ?? "");
const slug = id;

// Prepare SEO metadata based on the article content
const seo = {
  title: post.data.title,
  description: post.data.description,
};

// Schema.org metadata for SEO
const schema: WithContext<Thing> = {
  "@context": "https://schema.org",
  "@type": "Article",
  "url": Astro.url.href,
  "name": post.data.title,
  "description": post.data.description,
  "datePublished": post.data.date.toLocaleDateString('en-UK'),
  "isPartOf": {
    "@type": "WebSite",
    "url": `${Astro.site}`,
    "name": "DataNova",
    "description": "DataNova Analytics Inc. provides advanced analytics for Excel to help businesses unlock actionable insights quickly with no coding required."
  }
};
---

<BaseLayout seo={seo} schema={schema}>
  <section class="mx-auto max-w-[85rem] px-4 py-24 sm:px-6 lg:px-8">
    <div class="mx-auto max-w-(--breakpoint-xl)">
      <div class="grid gap-8 md:grid-cols-4 lg:gap-12">
        {
          validHeadings.length > 0 && (
            <div class="relative mt-10 rounded-lg border border-slate-300 border-dashed p-5 md:mt-0 md:border-none md:p-0 md:pb-24">
              <nav class="sticky top-10 md:top-32">
                <small class="font-semibold uppercase">On this page</small>
                <ul class="mt-2 space-y-2">
                  {validHeadings.map((heading) => (
                    <li>
                      <a
                        href={`#${heading.slug}`}
                        class="block text-slate-400 transition-colors duration-200 hover:text-slate-600"
                        data-toc-link
                      >
                        {heading.text}
                      </a>
                    </li>
                  ))}
                </ul>
              </nav>
            </div>
          )
        }
        <div class="mx-auto md:col-span-2 md:col-start-2 md:pt-8">
          <ul class="mb-5 text-xs text-slate-500">
            <li
              class="relative inline-block pe-6 before:absolute before:end-2 before:top-1/2 before:size-1 before:-translate-y-1/2 before:rounded-full before:bg-slate-300 last:pe-0 last-of-type:before:hidden"
            >
              {formatDate(post.data.date)}
            </li>
            <li
              class="relative inline-block pe-6 before:absolute before:end-2 before:top-1/2 before:size-1 before:-translate-y-1/2 before:rounded-full before:bg-slate-300 last:pe-0 last-of-type:before:hidden"
            >
              {readingTime}
            </li>
          </ul>

          <h1
            class="mb-4 text-balance text-center text-2xl text-slate-800 sm:text-3xl md:mb-6 md:text-left xl:text-5xl"
          >
            {post.data.title}
          </h1>
          <section
            class="prose prose-slate prose-headings:font-normal prose-h3:text-slate-500 prose-strong:text-slate-500"
          >
            <Content />
          </section>
        </div>
      </div>
    </div>
  </section>

  <script>
    let intersectionObserver: IntersectionObserver | null = null;
    let activeTimeout: number | null = null;
    const DEBOUNCE_DELAY = 100;
    let lastActiveId: string | null = null;
    let sections: HTMLElement[] = [];
    let scrollDirection: 'up' | 'down' = 'down';
    let lastScrollY = 0;
  
    function safeInitTOC() {
      if ("requestIdleCallback" in window) {
        requestIdleCallback(initTOC);
      } else {
        setTimeout(initTOC, 200);
      }
    }
  
    function initTOC() {
      const tocLinks = document.querySelectorAll<HTMLAnchorElement>("[data-toc-link]");
      sections = Array.from(document.querySelectorAll<HTMLElement>("h2[id]"));
  
      if (!tocLinks.length || !sections.length) return;
  
      resetActiveTocLinks(tocLinks);
      lastScrollY = window.scrollY;
  
      // Track scroll direction
      window.addEventListener('scroll', updateScrollDirection, { passive: true });
  
      intersectionObserver = new IntersectionObserver(
        (entries) => {
          if (activeTimeout) clearTimeout(activeTimeout);
  
          const intersectingEntry = entries.find(entry => entry.isIntersecting);
          
          if (intersectingEntry) {
            const currentSection = intersectingEntry.target as HTMLElement;
            let activeId = currentSection.id;
            
            // When scrolling up, use the previous section
            if (scrollDirection === 'up') {
              const currentIndex = sections.findIndex(s => s.id === activeId);
              if (currentIndex > 0) {
                activeId = sections[currentIndex - 1].id;
                console.log(`Scrolling up - using previous section: ${activeId}`);
              }
            }
  
            activeTimeout = window.setTimeout(() => {
              if (activeId !== lastActiveId) {
                resetActiveTocLinks(tocLinks);
                setActiveLink(activeId, tocLinks);
                lastActiveId = activeId;
              }
            }, DEBOUNCE_DELAY);
          } else {
            // Handle non-intersecting states
            const scrollY = window.scrollY;
            const firstSection = sections[0];
            
            // Before first section
            if (firstSection && scrollY < firstSection.offsetTop) {
              console.log('Before first section - clearing active');
              resetActiveTocLinks(tocLinks);
              lastActiveId = null;
            }
            // After last section remains handled by lastActiveId persistence
          }
        },
        {
          threshold: 0,
          rootMargin: "-50% 0px -50% 0px" // Only middle line counts
        }
      );
  
      sections.forEach(section => intersectionObserver?.observe(section));
    }
  
    function updateScrollDirection() {
      const currentScrollY = window.scrollY;
      scrollDirection = currentScrollY > lastScrollY ? 'down' : 'up';
      lastScrollY = currentScrollY;
    }
  
    function setActiveLink(sectionId: string, links: NodeListOf<HTMLAnchorElement>) {
      const activeLink = document.querySelector<HTMLAnchorElement>(
        `[data-toc-link][href="#${sectionId}"]`
      );
      if (activeLink) {
        activeLink.classList.add("text-slate-600", "font-medium");
        console.log("Active section:", sectionId);
      }
    }
  
    function resetActiveTocLinks(links: NodeListOf<HTMLAnchorElement>) {
      links.forEach(link => {
        link.classList.remove("text-slate-600", "font-medium");
      });
    }
  
    function cleanup() {
      if (activeTimeout) clearTimeout(activeTimeout);
      intersectionObserver?.disconnect();
      intersectionObserver = null;
      lastActiveId = null;
      window.removeEventListener('scroll', updateScrollDirection);
    }
  
    safeInitTOC();
    document.addEventListener("astro:page-load", safeInitTOC);
    document.addEventListener("astro:before-swap", cleanup);
  </script>
</BaseLayout>
